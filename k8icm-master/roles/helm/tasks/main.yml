- name: 检查是否已下载离线 tiller 镜像
  command: "ls {{ base_dir }}/down"
  register: download_info
  connection: local
  run_once: true

- name: 尝试推送离线 docker 镜像
  copy: src={{ base_dir }}/down/{{ item }} dest=/opt/kube/images/{{ item }}
  when: 'item in download_info.stdout'
  with_items:
  - "{{ tiller_offline }}"
  ignore_errors: true

- name: 获取 tiller 离线镜像推送情况
  command: "ls /opt/kube/images"
  register: image_info

- name: 导入 tiller 的离线镜像
  shell: "{{ bin_dir }}/docker load -i /opt/kube/images/{{ item }}"
  when: 'item in image_info.stdout'
  with_items:
  - "{{ tiller_offline }}"
  ignore_errors: true

- name: 下载helm客户端
  copy: src={{ base_dir }}/bin/helm dest={{ bin_dir }}/helm mode=0755
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true

# - name: 创建helm 客户端证书请求
#   template: src=helm-csr.json.j2 dest={{ ca_dir }}/{{ helm_cert_cn }}-csr.json
#   delegate_to: "{{ groups.deploy[0] }}"
#   run_once: true

# - name: 创建helm 客户端证书
#   shell: "cd {{ ca_dir }} && {{ bin_dir }}/cfssl gencert \
#         -ca={{ ca_dir }}/ca.pem \
#         -ca-key={{ ca_dir }}/ca-key.pem \
#         -config={{ ca_dir }}/ca-config.json \
#         -profile=kubernetes {{ helm_cert_cn }}-csr.json | {{ bin_dir }}/cfssljson -bare {{ helm_cert_cn }}"
#   delegate_to: "{{ groups.deploy[0] }}"
#   run_once: true

# - name: 创建tiller 服务端证书请求
#   template: src=tiller-csr.json.j2 dest={{ ca_dir }}/{{ tiller_cert_cn }}-csr.json
#   delegate_to: "{{ groups.deploy[0] }}"
#   run_once: true

# - name: 创建tiller 服务端证书和私钥
#   shell: "cd {{ ca_dir }} && {{ bin_dir }}/cfssl gencert \
#         -ca={{ ca_dir }}/ca.pem \
#         -ca-key={{ ca_dir }}/ca-key.pem \
#         -config={{ ca_dir }}/ca-config.json \
#         -profile=kubernetes {{ tiller_cert_cn }}-csr.json | {{ bin_dir }}/cfssljson -bare {{ tiller_cert_cn }}"
#   delegate_to: "{{ groups.deploy[0] }}"
#   run_once: true

- name: 准备rbac配置
  template: src=helm-rbac.yaml.j2 dest=./helm-rbac.yaml
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true

- name: 在k8s上创建rbac
  shell: "{{ bin_dir }}/kubectl apply -f ./helm-rbac.yaml"
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true

- name: 安装tiller
  shell: "{{ bin_dir }}/helm init \
        --upgrade \
        --service-account {{ tiller_sa }} \
        --tiller-namespace {{ helm_namespace }} \
        --tiller-image {{ tiller_image }} \
        --skip-refresh"
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true

# - name: 配置helm客户端
#   shell: "cp -f {{ ca_dir }}/ca.pem ~/.helm/ca.pem && \
#           cp -f {{ ca_dir }}/{{ helm_cert_cn }}.pem ~/.helm/cert.pem && \
#           cp -f {{ ca_dir }}/{{ helm_cert_cn }}-key.pem ~/.helm/key.pem"
#   delegate_to: "{{ groups.deploy[0] }}"
#   run_once: true

- name: 添加 helm 命令自动补全
  lineinfile:
    dest: ~/.bashrc
    state: present
    regexp: 'helm completion'
    line: 'source <(helm completion bash)'
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true

# 为方便与tiller进行安全通信，启用helm tls环境变量；仅支持helm v2.11.0及以上版本
# - name: 配置helm tls环境变量
#   lineinfile:
#     dest: ~/.bashrc
#     state: present
#     regexp: "helm tls environment"
#     line: "export HELM_TLS_ENABLE=true # generated by helm tls environment"
#   delegate_to: "{{ groups.deploy[0] }}"
#   run_once: true